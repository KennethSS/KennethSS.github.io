{"posts":[{"title":"Github 블로그 만들기 with Hexo - 1","text":"","link":"/2022/12/15/Github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-with-Hexo-1/"},{"title":"Ktoin으로 람다 함수와 고차함수란","text":"Kotlin으로 람다 함수(Lambda Function)와 고차 함수(High Order Function)에 대해서 알아보자Lambda Function(람다 함수) 이란?람다 함수는 함수형 프로그래밍 언어에서 사용되는 개념으로 익명 함수라고도 불린다Java8 부터 사용이 가능하며, 가독성을 향상시키고 보일러 플레이트 코드를 줄일 수 있다 Lambda Function(람다 함수) 의 사용 방법기본 사용 방법 1val lambdaName : Type = { argumentList -&gt; codeBody } Type Interface를 활용하는 방법 12val square = { number: Int -&gt; number * number }val nine = square(3) 123val lambdaName = { a: Int, b: String -&gt; &quot;$a $b&quot;} 1개 이상의 타입을 파라미터로 전달 가능하고 리턴 타입을 생략 할 수 있습니다 High Order Function(고차 함수) 란?함수를 인수로 취하거나 함수를 결과로 반환할 수 있는 함수를 말합니다 아래 사용되고 있는 예시를 보겠습니다. 1234567fun square(x: Int, y: Int, block: (result: Int) -&gt; Unit) { block(x * y)}square(4, 4) { result -&gt; // result 16} x, y를 인자를 받고 해당 block이라는 람다식을 invoke 합니다. 선언된 square 함수에서 block 파라미터의 블록에서 결과값을 받을 수 있습니다 고차 함수로 람다함수를 파라미터로 넘겨줄 때 과도하게 사용하면 런타임 오버헤드가 발생합니다.그럴때는 inline 키워드를 사용하여 오버헤드를 방지해야 합니다. Medium 글 Medium 설명글에 inline에 대해서 작성한 글이 있습니다. 참고해 보시길 바랍니다.","link":"/2022/12/15/Ktoin%EC%9C%BC%EB%A1%9C-%EB%9E%8C%EB%8B%A4-%ED%95%A8%EC%88%98%EC%99%80-%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98%EB%9E%80/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/12/18/hello-world/"},{"title":"자료구조 - Collection","text":"Java Collection FrameworkJava Collection Framework란 일반적으로 재사용 가능한 컬렉션 데이터 구조를 구현하는 인터페이스 집합입니다. CollectionCollection은 여러 원소(Element)를 담을 수 있는 자료구조를 뜻합니다. 아래는 Collection.java 인터페이스를 정의한 모습입니다. 1public interface Collection&lt;E&gt; extends java.lang.Iterable&lt;E&gt; 아래는 Collection의 다이어그램 구조입니다. Collection Methods대표적인 Collection의 메서드들입니다. int size() : 컬렉션의 총 개수를 반환 boolean add(E e) : 컬렉션에 요소 추가 boolean addAll(Collection&lt;? extends E&gt;) : 컬렉션의 모든 요소를 해당 컬렉션에 추가 boolean remove(Object o) : 컬렉션에 요소 삭제 boolean removeAll(Collection&lt;? extends E&gt;) : 컬렉션의 모든 요소를 해당 컬렉션에 추가 void clear() : 컬렉션의 모든 요소 삭제 boolean contains(Object o) : 컬렉션이 전달받은 객체를 포함하는지 boolean equals(Object o) : 컬렉션과 전달된 오브젝트가 같은지 boolean isEmpty() : 컬렉션이 비어 있는지 Object [] toArray() : 해컬렉션의 모든 요소를 Object 타입의 배열로 반환 Collection 의 3가지 유형Collection을 상속받는 인터페이스 크게 3가지 입니다. Set List Queue List (Interface)List 인터페이스는 순서대로 엘리먼트들을 나열한 컬렉션이며 중복 요소를 포함 가능하고 인덱스로 모든 엘리먼트에 접근 가능한게 특징이입니다. List 인터페이스를 상속받아 구현된 대표적인 클래스는 ArrayList, LinkedList, Vector, Stack 이 있습니다. Set (Interface)Set 인터페이스는 엘리먼트의 집합을 표현한 컬렉션이며 중복 요소를 포함할 수 없고 iterator 또는 foreach를 이용하여 탐색합니다.Set 인터페이스로 구현된 클래스는 **HashSet, LinkedHashSet, TreeSet ** 이 있습니다. Queue (Interface)Queue는 먼저 집어 넣은 데이터가 먼저 나오는 FIFO (First In First Out)구조로 저장하는 형식을 말합니다. 기본 컬렉션 작업 외에도 Queue는 삽입, 추출 및 검사 작업을 제공한다. Quque 인터페이스로 구현된 클래스는 PriorityQueue 가 있습니다.","link":"/2022/12/27/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Collection/"}],"tags":[{"name":"java","slug":"java","link":"/tags/java/"},{"name":"categories","slug":"categories","link":"/tags/categories/"}],"categories":[],"pages":[]}