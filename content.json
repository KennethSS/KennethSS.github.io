{"posts":[{"title":"RxJava - Scan","text":"ScanScan은 Observable이 발행하는 각 항목에 대해서 순차적으로 작성한 함수의 결과를 적용하고 값을 내보냅니다. Scan 연산자는 Reduce와 비슷하지만 조금 다릅니다. Observable에서 발행된 첫번째 아이템은 그대로 결과로 전달하고 그 이후 부터는 중간 결과 값과 최종 결과를 구독자에게 발행합니다. 샘플 코드 ()123456// 1, 2, 3observable .scan { t1, t2 -&gt; println(&quot;Scan $t1 to $t2&quot;) t1 + t2 }.subscribe(::printSubscribe) 12345Result: 1Scan 1 to 2Result: 3Scan 3 to 3Result: 6","link":"/2023/01/12/RxJava-Scan/"},{"title":"Github 블로그 만들기 with Hexo - 1","text":"","link":"/2022/12/15/Github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-with-Hexo-1/"},{"title":"Kotlin으로 람다 함수와 고차함수란","text":"Kotlin으로 람다 함수(Lambda Function)와 고차 함수(High Order Function)에 대해서 알아보자Lambda Function(람다 함수) 이란?람다 함수는 함수형 프로그래밍 언어에서 사용되는 개념으로 익명 함수라고도 불린다Java8 부터 사용이 가능하며, 가독성을 향상시키고 보일러 플레이트 코드를 줄일 수 있다 Lambda Function(람다 함수) 의 사용 방법기본 사용 방법 1val lambdaName : Type = { argumentList -&gt; codeBody } Type Interface를 활용하는 방법 12val square = { number: Int -&gt; number * number }val nine = square(3) 123val lambdaName = { a: Int, b: String -&gt; &quot;$a $b&quot;} 1개 이상의 타입을 파라미터로 전달 가능하고 리턴 타입을 생략 할 수 있습니다 High Order Function(고차 함수) 란?함수를 인수로 취하거나 함수를 결과로 반환할 수 있는 함수를 말합니다 아래 사용되고 있는 예시를 보겠습니다. 1234567fun square(x: Int, y: Int, block: (result: Int) -&gt; Unit) { block(x * y)}square(4, 4) { result -&gt; // result 16} x, y를 인자를 받고 해당 block이라는 람다식을 invoke 합니다. 선언된 square 함수에서 block 파라미터의 블록에서 결과값을 받을 수 있습니다 고차 함수로 람다함수를 파라미터로 넘겨줄 때 과도하게 사용하면 런타임 오버헤드가 발생합니다.그럴때는 inline 키워드를 사용하여 오버헤드를 방지해야 합니다. Medium 글 Medium 설명글에 inline에 대해서 작성한 글이 있습니다. 참고해 보시길 바랍니다.","link":"/2022/12/15/Ktoin%E1%84%8B%E1%85%B3%E1%84%85%E1%85%A9-%E1%84%85%E1%85%A1%E1%86%B7%E1%84%83%E1%85%A1-%E1%84%92%E1%85%A1%E1%86%B7%E1%84%89%E1%85%AE%E1%84%8B%E1%85%AA-%E1%84%80%E1%85%A9%E1%84%8E%E1%85%A1%E1%84%92%E1%85%A1%E1%86%B7%E1%84%89%E1%85%AE%E1%84%85%E1%85%A1%E1%86%AB/"},{"title":"자료구조 - Collection","text":"Java Collection FrameworkJava Collection Framework란 일반적으로 재사용 가능한 컬렉션 데이터 구조를 구현하는 인터페이스 집합입니다. CollectionCollection은 여러 원소(Element)를 담을 수 있는 자료구조를 뜻합니다. 아래는 Collection.java 인터페이스를 정의한 모습입니다. 1public interface Collection&lt;E&gt; extends java.lang.Iterable&lt;E&gt; 아래는 Collection의 다이어그램 구조입니다. Collection Methods대표적인 Collection의 메서드들입니다. int size() : 컬렉션의 총 개수를 반환 boolean add(E e) : 컬렉션에 요소 추가 boolean addAll(Collection&lt;? extends E&gt;) : 컬렉션의 모든 요소를 해당 컬렉션에 추가 boolean remove(Object o) : 컬렉션에 요소 삭제 boolean removeAll(Collection&lt;? extends E&gt;) : 컬렉션의 모든 요소를 해당 컬렉션에 추가 void clear() : 컬렉션의 모든 요소 삭제 boolean contains(Object o) : 컬렉션이 전달받은 객체를 포함하는지 boolean equals(Object o) : 컬렉션과 전달된 오브젝트가 같은지 boolean isEmpty() : 컬렉션이 비어 있는지 Object [] toArray() : 해컬렉션의 모든 요소를 Object 타입의 배열로 반환 Collection 의 3가지 유형Collection을 상속받는 인터페이스 크게 3가지 입니다. Set List Queue List (Interface)List 인터페이스는 순서대로 엘리먼트들을 나열한 컬렉션이며 중복 요소를 포함 가능하고 인덱스로 모든 엘리먼트에 접근 가능한게 특징이입니다. List 인터페이스를 상속받아 구현된 대표적인 클래스는 ArrayList, LinkedList, Vector, Stack 이 있습니다. Set (Interface)Set 인터페이스는 엘리먼트의 집합을 표현한 컬렉션이며 중복 요소를 포함할 수 없고 iterator 또는 foreach를 이용하여 탐색합니다.Set 인터페이스로 구현된 클래스는 **HashSet, LinkedHashSet, TreeSet ** 이 있습니다. Queue (Interface)Queue는 먼저 집어 넣은 데이터가 먼저 나오는 FIFO (First In First Out)구조로 저장하는 형식을 말합니다. 기본 컬렉션 작업 외에도 Queue는 삽입, 추출 및 검사 작업을 제공한다. Quque 인터페이스로 구현된 클래스는 PriorityQueue 가 있습니다.","link":"/2022/12/27/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-Collection/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/12/18/hello-world/"},{"title":"기본 코루틴(Coroutine Basics)","text":"첫번째 코루틴(Your first coroutine)코루틴은 일시 중단 가능한 계산의 인스턴스입니다. 코드의 블록들이 다른 코드 들과 동시에 동작해야 한다는 점에서는 개념적으로 스레드와 유사합니다. 하지만 코루틴은 나머지 코드와 동시에 작동하는 코드들이 하나의 블럭에서 실행해야 코드의 블럭이 실행될 때 동시적으로 실행할 수 있습니다. 그러나 코루틴은 특정한 스레드에 바운드 되지 않고 한 스레드에서 일시 중단하고 다른 스레드에서 다시 재개할 수 있습니다. 코루틴은 경량 스레드라고 생각할 수 있습니다. 하지만 실제 우리가 사용하는 스레드와는 다르게 만드는 중요한 요소들이 있습니다. 다음 코드를 실행하여 첫번째 코루틴 작업을 확인해봅니다. 1234567891011fun main() = runBlocking { // this: CoroutineScope launch { // launch a new coroutine and continue delay(1000L) // non-blocking delay for 1 second (default time unit is ms) println(&quot;World!&quot;) // print after delay } println(&quot;Hello&quot;) // main coroutine continues while a previous one is delayed}// resultHelloWorld! 다음과 같은 결과가 나오는 걸 볼 수 있습니다. 한번 이 코드가 무엇인지 해부해보겠습니다 launch는 코루틴 빌더입니다. launch는 새로운 코루틴을 실행함과 동시에 나머지 코드들을 독립적으로 계속 작업합니다. 그것이 Hello가 첫번째로 프린트된 이유입니다. delay 는 특별한 일시중단 함수입니다. 코루틴을 특정 시간동안 일시 중단합니다. 코루틴을 일시중단해도 기본스레드가 차단되지는 않으며 다른 코루틴들도 기본스레드를 사용하여 코루틴을 실행하할 수 있습니다. runBlocking은 fun main() 과 같은 기본적인 코루틴이 아닌 세계와 runBlocking { ... } 중괄호 안에 있는 코루틴 코드들을 연결하는 코루틴 빌더입니다. runBlocking 코드를 작성해보면 IDE에서 중괄호 바로 뒤에 CoroutineScope라는 힌트가 표시됩니다. launch는 CoroutineScope에서만 선언이 가능하기 때문에 만약 깜빡하고 runBlocking을 코드에서 제거한다면 launch를 호출할 때 에러가 발생합니다. 1Unresolved reference: launch runBlocking 은 의미는 runBlocking { ... } 내부의 모든 코루틴들이 실행이 완료 될 때까지 이를 실행하는 스레드(메인스레드라고 가정)는 차단된다는 것을 의미합니다. 스레드는 차단하는 것은 스레드의 비용이 비싸기 때문에 비효율적이지만 실제코드에서는 앱의 최상위 레벨에서 runBlcoking 자주 사용되는 것을 볼 수 있습니다. 구조화된 동시성(Structured concurrency)코루틴 구조화된 동시성을 원칙을 따릅니다. 즉, 구조화된 동시성이란 새로운 코루틴은 오직 코루틴의 수명을 제한하는 특정한 CoroutineScope에서만 실행될 수 있다는 것을 의미합니다. 위의 예제에서는 runBlocking 해당하는 스코프를 설정하고 World!는 몇초뒤에 프린트 된 것을 볼 수 있습니다. 실제 앱에서는 많은 양의 코루틴을 실행해야합니다. 구조화된 동시성은 손실이나 릭을 발생하지 않게 보장합니다. 외부 범위는 모든 하위 코루틴이 완료될 때까지 완료할 수 없습니다. 또한 구조화된 동시성은은 코드에서 발생한 모든 에러가 올바르게 보고되고 손실이 발생하지 않게 합니다. 함수 추출 리팩토링(Extract function refactoring)launch { … } 내부의 코드 블록을 별도의 함수로 추출해보겠습니다. 만약 코드에서 “함수 추출”이라는 리팩토링을 수행한다면 suspend 수정자와 함께 새로운 함수를 만들 수 있습니다. 이건 당신의 첫번째 중단 함수 입니다. 중단 함수는 코루틴 내부에서 일반적인 함수처럼 사용합니다 하지만 일반적인 함수와 다른 점은 코루틴을 일시중지하기 위해 다른 코루틴 함수의 기능들(deplay 함수 같은) 추가 기능들이 존재한다는 것입니다. 12345678910111213fun main() = runBlocking { // this: CoroutineScope launch { doWorld() } println(&quot;Hello&quot;)}// this is your first suspending functionsuspend fun doWorld() { delay(1000L) println(&quot;World!&quot;)}// resultHelloWorld! 스코프 빌더(Scope builder)코루틴스코프 빌더를 사용하여 다른 빌더에서 제공되는 코루틴 스코프외에도 자신만의 스코프를 선언할 수 있습니다. 그리고 코루틴 스코프를 생성한 후 해당 스코프내의 생성된 자식 작업들이 완료되기 전까지는 스코프가 완료되지 않습니다. 1234567891011121314fun main() = runBlocking { doWorld()}suspend fun doWorld() = coroutineScope { // this: CoroutineScope launch { delay(1000L) println(&quot;World!&quot;) } println(&quot;Hello&quot;)}// resultHelloWorld! runBlocking 그리고 coroutineScope 빌더들은 둘다 바디와 모든 자식들이 작업이 완료되기까지 기다리는 것으로 유사하게 보이지만 가장 큰 차이점은 runBlocking 함수가 대기를 위해 현재 스레드를 _차단_한다면 coroutineScope는 단순히 일시중단하고 다른 용도를 위해 기본 스레드를 해제합니다. 그 차이 때문에 runBlocking은 일반 함수이고 coroutineScope는 정지함수 입니다. coroutineScope를 어떠한 중단함수로서 사용할 수 있습니다. 예를 들어 Hello와 World의 동시적인 로그 출력을 suspend fun doWorld() 로 옮길 수 있습니다. 스코프 빌더 그리고 동시성(Scope builder and concurrency )coroutineScope 빌더는 여러 동시 작업을 수행하기 위해 정지 함수 내에서 사용할 수 있습니다 1234567891011121314151617181920212223// Sequentially executes doWorld followed by &quot;Done&quot;fun main() = runBlocking { doWorld() println(&quot;Done&quot;)}// Concurrently executes both sectionssuspend fun doWorld() = coroutineScope { // this: CoroutineScope launch { delay(2000L) println(&quot;World 2&quot;) } launch { delay(1000L) println(&quot;World 1&quot;) } println(&quot;Hello&quot;)}// resultHelloWorld 1World 2Done launch { ... } 블록 내부에 두 개의 코드들은 동시적으로 실행되며 World 1이 먼저 프린트 된 후 1초 후에 World 2의 프린트가 시작되고 2초 뒤에 프린트합니다. coroutineScope doWorld 코루틴 스코프에 있는 doWorld의 함수는 두 개의 작업이 모두 완료된 후에만 완료됩니다. 그래서 doWorld는 모든 작업이 완료된 후 Done 문자열이 인쇄되도록 허용합니다 1234HelloWorld 1World 2Done 명시적 작업(An explicit job)launch 코루틴 빌더는 Job 객체를 리턴합니다. Job은 실행된 코루틴을 핸들링하고 작업이 완전히 끝날때까지 명시적으로 기다리는 용도로 사용할 수 있습니다. 예를들어 자식 코루틴들이 완료되기전까지 기다린 후에 “Done” 문자열을 출력할 수 있습니다. 1234567891011val job = launch { // launch a new coroutine and keep a reference to its Job delay(1000L) println(&quot;World!&quot;)}println(&quot;Hello&quot;)job.join() // wait until child coroutine completesprintln(&quot;Done&quot;) // resultHelloWorld!Done 코루틴은 가볍습니다(Coroutines are light-weight)코루틴은 JVM 스레드에서 리소스 집약이 더 적습니다. 스레드를 사용할 때 JVM의 가용 메모리를 소진하는 코드는 리소 제한에 도달하지 않고 콜튄을 사용하여 표현할 수 있습니다. 스레드에서 JVM의 가용 메모리를 소진하는 코드는 코루틴을 사용하는것으로 리소스 제한에 도달하지 않을 수 있습니다. 예를들어 다음 코드는 100000개의 서로 다른 코루틴을 시작하여 각각 5초를 기다린 다음 마침표(‘.’)를 프린트하는 코드가 있습니다. 이 코드는 매우 적은 메모리를 사용합니다. 12345678910import kotlinx.coroutines.*fun main() = runBlocking { repeat(100_000) { // launch a lot of coroutines launch { delay(5000L) print(&quot;.&quot;) } }} 해당 코드를 스레드에서 비교하고 싶으신 경우 runBlocking과 launch를 thread로 교체하고 delay 함수도 Thread.sleep으로 교체해줍니다. 만약 해당 코드를 실행한다면 많은 메모리를 소비하여 OOM(out-of-memoery)에러가 발생할 수 있습니다.","link":"/2023/01/08/coroutine/"},{"title":"ViewModel이 화면회전에도 데이터를 유지할 수 있는 이유","text":"안드로이드에서 구성변경(Configuration Change)이 발생할 때 ViewModel 객체는 Activity가 재생성 되더라도 파괴되지 않고 객체가 유지 되는것을 볼 수 있습니다. 여기서의 ViewModel은 MicroSoft에서 제시한 MVVM의 ViewModel 아닌 Android Architecture Component의 ViewModel 입니다. Activity의 마지막 생명주기인 onDestroy()은 파괴되고 사라지기전에 호출되는 생명주기 마지막 오버라이드 함수인 이후 호출되는 ViewModel의 생명주기 중 하나인 onCleared()에서 여러가지 해제하는 작업들을 합니다. 하지만 여기서 하나 의문점은 Activity의 종료가 구성변경과 같은 재생성에 의한 종료인지 finish()를 통한 종료인지 ViewModel은 어떻게 알 수 있을까요? 만약 단순 구성변경으로 발생한 Activity의 종료일 때 ViewModel의 onCleared()에서 여러 작업들을 해제한다면 사용자들은 잘못된 정보를 전달 받을 확률이 높습니다. 이 때문에 Activity가 재생성으로 인한 파괴(Destroy)라는 것을 파악하고 전파해야 합니다. 어떻게 이런 동작들이 이루어지는지 ViewModel과 Activity의 내부 코드들을 차근차근 살펴보려고 합니다. 아래 그림은 Activity와 ViewModel의 라이프사이클을 순서를 나타내는 이미지입니다. 일단, 가장 먼저 ViewModel에서 onCleared()가 호출되는 함수를 따라가보겠습니다. 123456789101112public abstract class ViewModel { @SuppressWarnings(&quot;WeakerAccess&quot;) protected void onCleared() { } @MainThread final void clear() { ///.. onCleared(); }} ViewModel에서 onCleared()는 final 함수인 clear()에서 호출이됩니다. 이 clear()는 누가 호출하는지 따라가보면 ViewModelStore라는 객체에서 호출하는 것을 볼 수 있습니다. ViewModelStore는 ViewModel들을 Map 형태로 저장하기는 코드로 구성 되어있습니다. ViewModelStore의 클래스 내부를 살펴보면 String Key값과 ViewModel Value를 가지는 해시맵을 가지고 있습니다. 1234567891011121314151617181920212223242526272829public class ViewModelStore { private final HashMap&lt;String, ViewModel&gt; mMap = new HashMap&lt;&gt;(); final void put(String key, ViewModel viewModel) { ViewModel oldViewModel = mMap.put(key, viewModel); if (oldViewModel != null) { oldViewModel.onCleared(); } } final ViewModel get(String key) { return mMap.get(key); } Set&lt;String&gt; keys() { return new HashSet&lt;&gt;(mMap.keySet()); } /** * Clears internal storage and notifies ViewModels that they are no longer used. */ public final void clear() { for (ViewModel vm : mMap.values()) { vm.clear(); } mMap.clear(); }} 이 클래스는 단순히 해시맵에 put과get하기 위한 함수들을 제공합니다. 해시맵에 들어가는 키 값은 기본값으로는 androidx.lifecycle.ViewModelProvider.DefaultKey:modelClass.canonicalName로 생성합니다. clear()를 보면 해시맵의 Value들을 재귀하여 ViewModel의 clear()를 호출하고 해시맵을 clear() 하는 것을 볼 수 있습니다. 결국 이 ViewModelStore 가 ViewModel의 clear()를 호출하는 것을 알아냈고 이 함수는 ComponentActivity에서 호출되는 것을 확인할 수 있습니다. 123456789101112131415161718public ComponentActivity() { getLifecycle().addObserver(new LifecycleEventObserver() { @Override public void onStateChanged( @NonNull LifecycleOwner source, @NonNull Lifecycle.Event event ) { if (event == Lifecycle.Event.ON_DESTROY) { // Clear out the available context mContextAwareHelper.clearAvailableContext(); // And clear the ViewModelStore if (!isChangingConfigurations()) { getViewModelStore().clear(); } } } });} ComponentActivity에서는 LifecycleEventObserver를 라이프사이클에 관찰자로 등록하고 onDestroy 와 !isChangingConfigurations()가 두개 모두 만족할 경우 ViewModelStore의 clear()가 호출되어 ViewModel까지 전달되는 것을 볼 수 있습니다. 1234567public class Activity { boolean mChangingConfigurations = false; public boolean isChangingConfigurations() { return mChangingConfigurations; }} isChangingConfigurations()는 Activity 클래스의 내부 멤버변수인 mChangingConfigurations를 리턴해주는 함수입니다. 이제 이 mChangingConfigurations를 true 혹은 false로 변경하는 곳이 어디인지를 찾으면 됩니다. 해답은 ActivityThread에 있었습니다. 이 클래스는 액티비티 매니저의 요청들을 어플리케이션 프로세스에서 메인스레드로 실행할 수 있게 Activity나 Broadcast 그리고 다른 작업들을 스케쥴링하고 실행하는 것을 관리해주는 클래스입니다. 이 클래스에 오버라이드된 activityLocalRelaunch()를 살펴보면 ActivityClientRecord에 기록된 activity에 mChangingConfiguration을 true로 설정해준 것을 확인할 수 있습니다. 12345678@Overridepublic void handleRelaunchActivity( ActivityClientRecord tmp, PendingTransactionActions pendingActions) { ActivityClientRecord r = mActivities.get(tmp.token); r.activity.mChangingConfigurations = true;} 여기까지 mChangingConfigurations의 변수를 통해 getViewModelStore().clear()가 실행여부를 밝혀냈습니다. 하지만 여기서 ViewModel의 생성도 결국 Activity에서 이루어지는데 Activity가 완전히 파괴되고 다시 만들어질 때 ViewModel의 인스턴스를 어떻게 유지할지에 대한 궁금증이 생깁니다. 여기에는 ViewModelStoreOwner에 해답이 있습니다. 1234public interface ViewModelStoreOwner { @NonNull ViewModelStore getViewModelStore();} ViewModelStoreOwner 인터페이스 주석 설명을 보면 이 인터페이스 구현체의 책임은 구성 변경중에도 ViewModelStore를 유지하고 이 범위가 파괴될 때 ViewModelStore.clear()를 호출하는 것이라고 적혀있습니다. 즉, ViewModelStoreOwner는 각 Owner(일반적으로 Activity, Fragment가 해당 됩니다.)들이 구성변경이 일어나서 파괴되고 재생성되어도 인스턴스를 유지하는 역할을 합니다. 만약 Activity나 Fragment같은 Owner들은 완전히 파괴되고 재생성될 여지가 없다면 에서 ViewModelStore객체에 clear()를 호출하여 더이상 ViewModel이 사용되지 않는다는 사실을 전파해야합니다. ViewModelStoreOwner의 구현체인 ComponentActivity의 코드를 확인해보겠습니다. 1234567891011121314151617181920@NonNull@Overridepublic ViewModelStore getViewModelStore() { if (getApplication() == null) { throw new IllegalStateException(&quot;Your activity is not yet attached to the &quot; + &quot;Application instance. You can't request ViewModel before onCreate call.&quot;); } //This is true when invoked for the first time if (mViewModelStore == null) { NonConfigurationInstances nc = (NonConfigurationInstances) getLastNonConfigurationInstance(); if (nc != null) { // Restore the ViewModelStore from NonConfigurationInstances mViewModelStore = nc.viewModelStore; } if (mViewModelStore == null) { mViewModelStore = new ViewModelStore(); } } return mViewModelStore;} 코드를 살펴보면 getLastNonConfigurationInstane()를 호출하여 NoConfigurationInstance라는 클래스를 캐스팅해서 가져온 후 ComponentActivity의 ViewModelStore 멤버변수로서 할당해줍니다. Activity가 구성변경에 의해 재생성될 때 ComponentActivity에 있는 NonConfigurationInstance클래스는 이전 ViewModelState의 인스턴스를 포함하고 있습니다. Activity가 처음 생성될 때 NonConfigurationInstance는 null을 반환하고 그런 경우에는 ViewModelStore를 새로 생성합니다. 조금더 내부 코드를 살펴보겠습니다. 1234567891011121314151617181920212223242526272829303132333435//Activity.java@Nullablepublic Object getLastNonConfigurationInstance() { return mLastNonConfigurationInstances != null ? mLastNonConfigurationInstances.activity : null;}//ComponentActivity.java@Override@Nullable@SuppressWarnings(&quot;deprecation&quot;)public final Object onRetainNonConfigurationInstance() { // Maintain backward compatibility. Object custom = onRetainCustomNonConfigurationInstance(); ViewModelStore viewModelStore = mViewModelStore; if (viewModelStore == null) { // No one called getViewModelStore(), so see if there was an existing // ViewModelStore from our last NonConfigurationInstance NonConfigurationInstances nc = (NonConfigurationInstances) getLastNonConfigurationInstance(); if (nc != null) { viewModelStore = nc.viewModelStore; } } if (viewModelStore == null &amp;&amp; custom == null) { return null; } NonConfigurationInstances nci = new NonConfigurationInstances(); nci.custom = custom; nci.viewModelStore = viewModelStore; return nci;} Activity가 구성변경이 발생하여 재생성될 때 ComponentActivity 의 onRetainNonConfigurationInstance 함수가 호출되고 NonConfigurationInstance(ComponentActivity.java)의 객체를getLastNonConfigurationInstance()를 호출하여 Activity의 mLastNonConfigurationInstances.activity를 반환받는데 이 객체는 안드로이드 시스템에서 재생성된 후의 액티비티를 전달한 것입니다. Activity가 재생성후에 Activity.java클래스에서 mLastNonConfigurationInstances 객체는 attach()에서 lastNonConfigurationInstances를 전달받아 mLastNonConfigurationInstances에 할당합니다. 123456789final void attach(Context context, ActivityThread aThread, Instrumentation instr, IBinder token, int ident, Application application, Intent intent, ActivityInfo info, CharSequence title, Activity parent, String id, NonConfigurationInstances lastNonConfigurationInstances, Configuration config, String referrer, IVoiceInteractor voiceInteractor, Window window, ActivityConfigCallback activityConfigCallback, IBinder assistToken, IBinder shareableActivityToken) {} 마무리지금까지 ViewModel이 구성변경에도 인스턴스를 유지하는 방법과 onCleared()의 호출 조건을 알아보았습니다. ViewModel의 인스턴스 유지 과정을 살펴보니 Activity에 대한 코드의 이해도도 증가되고 ViewModel의 구성방식들도 이해하게되어 좋았습니다. 안드로이드 개발자라면 ViewModel을 잘 활용하여 구성변경에도 데이터를 유지하여 사용자 경험을 증진시키는게 하나의 임무라고 생각합니다 :smile: 긴글 봐주셔서 감사합니다. 레퍼런스 https://blog.mindorks.com/android-viewmodels-under-the-hood/","link":"/2023/01/08/ViewModel%EC%9D%B4-%ED%99%94%EB%A9%B4%ED%9A%8C%EC%A0%84%EC%97%90%EB%8F%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%9C%A0%EC%A7%80%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%9D%B4%EC%9C%A0/"}],"tags":[{"name":"RxJava","slug":"RxJava","link":"/tags/RxJava/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"categories","slug":"categories","link":"/tags/categories/"}],"categories":[{"name":"RxJava","slug":"RxJava","link":"/categories/RxJava/"},{"name":"Kotlin","slug":"Kotlin","link":"/categories/Kotlin/"},{"name":"Transforming","slug":"RxJava/Transforming","link":"/categories/RxJava/Transforming/"},{"name":"Coroutine","slug":"Coroutine","link":"/categories/Coroutine/"}],"pages":[{"title":"categories","text":"","link":"/categories/index.html"}]}